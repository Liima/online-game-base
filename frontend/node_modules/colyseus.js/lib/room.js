'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRoom = createRoom;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events').EventEmitter,
    protocol = require('./protocol');

var Room = (function (_EventEmitter) {
  _inherits(Room, _EventEmitter);

  function Room(client, name) {
    _classCallCheck(this, Room);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Room).call(this));

    _this.id = null;
    _this.client = client;
    _this.name = name;
    _this.state = {};

    _this.on('leave', function () {
      return _this.removeAllListeners();
    });
    return _this;
  }

  _createClass(Room, [{
    key: 'leave',
    value: function leave() {
      if (this.id >= 0) {
        this.client.send([protocol.LEAVE_ROOM, this.id]);
      }
    }
  }, {
    key: 'send',
    value: function send(data) {
      this.client.send([protocol.ROOM_DATA, this.id, data]);
    }
  }]);

  return Room;
})(EventEmitter);

function createRoom(client, name) {
  return new Room(client, name);
}