{
  "name": "fast-json-patch",
  "version": "2.0.3",
  "description": "Fast implementation of JSON-Patch (RFC-6902) with duplex (observe changes) capabilities",
  "homepage": "https://github.com/Starcounter-Jack/JSON-Patch",
  "keywords": [
    "json",
    "patch",
    "http",
    "rest"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Starcounter-Jack/JSON-Patch.git"
  },
  "bugs": {
    "url": "https://github.com/Starcounter-Jack/JSON-Patch/issues"
  },
  "author": {
    "name": "Joachim Wester",
    "email": "joachimwester@me.com",
    "url": "http://www.starcounter.com/"
  },
  "license": "MIT",
  "main": "lib/duplex.js",
  "typings": "lib/duplex.d.ts",
  "engines": {
    "node": ">= 0.4.0"
  },
  "devDependencies": {
    "babili-webpack-plugin": "^0.1.1",
    "benchmark": "^2.1.2",
    "chalk": "^1.1.3",
    "jasmine": "^2.5.1",
    "jsdom": "^9.5.0",
    "jsonfile": "^2.3.1",
    "typescript": "~2.0.0",
    "underscore": "^1.8.3",
    "webpack": "^2.6.1"
  },
  "scripts": {
    "tsc": "tsc",
    "version": "tsc && webpack",
    "build": "tsc && webpack",
    "tsc-watch": "tsc -w",
    "test": "npm run tsc && npm run test-core && npm run test-duplex",
    "test-duplex": "jasmine DUPLEX=yes JASMINE_CONFIG_PATH=test/jasmine.json",
    "test-core": "jasmine  DUPLEX=no JASMINE_CONFIG_PATH=test/jasmine.json test/spec/jsonPatchTestsSpec.js test/spec/coreSpec.js test/spec/validateSpec.js",
    "bench": "npm run bench-core && npm run bench-duplex",
    "bench-core": "node test/spec/coreBenchmark.js",
    "bench-duplex": "node test/spec/coreBenchmark.js DUPLEX=yes && node test/spec/duplexBenchmark.js"
  },
  "dependencies": {
    "deep-equal": "^1.0.1"
  },
  "gitHead": "02187fbc74f3718ac7498f3c9b955df79cc1c3e2",
  "readme": "JSON-Patch\n===============\n\n> A leaner and meaner implementation of JSON-Patch. Small footprint. High performance.\n\n[![Build Status](https://travis-ci.org/Starcounter-Jack/JSON-Patch.svg?branch=master)](https://travis-ci.org/Starcounter-Jack/JSON-Patch)\n\nWith JSON-Patch, you can:\n- **applyPatch** to apply patches\n- **applyOperation** to apply single operations\n- **validate** a sequence of patches\n- **observe** for changes (and generate patches when a change is detected)\n- **compare** two objects (to obtain the difference)\n\n## Why you should use JSON-Patch\n\nJSON-Patch [(RFC6902)](http://tools.ietf.org/html/rfc6902) is a standard format that\nallows you to update a JSON document by sending the changes rather than the whole document.\nJSON Patch plays well with the HTTP PATCH verb (method) and REST style programming.\n\nMark Nottingham has a [nice blog]( http://www.mnot.net/blog/2012/09/05/patch) about it.\n\n## Footprint\n4 KB minified and gzipped (12 KB minified)\n\n## Performance\n\n##### [`add` benchmark](http://jsperf.com/json-patch-benchmark/2)\n\n<img width=\"907\" alt=\"screenshot 2015-10-22 20 35 22\" src=\"https://cloud.githubusercontent.com/assets/566463/10674707/b3deec60-78fc-11e5-876d-59c90a0cab2f.png\">\n\n##### [`replace` benchmark](http://jsperf.com/json-patch-benchmark-replace/2)\n\n<img width=\"904\" alt=\"screenshot 2015-10-22 20 35 58\" src=\"https://cloud.githubusercontent.com/assets/566463/10674708/b6f80d14-78fc-11e5-82c6-658510f31f63.png\">\n\nTested on 22.10.2015. Compared libraries:\n\n- [Starcounter-Jack/JSON-Patch](https://github.com/Starcounter-Jack/JSON-Patch) 0.5.4\n- [bruth/jsonpatch-js](https://github.com/bruth/jsonpatch-js) 0.5.0\n- [dharmafly/jsonpatch.js](https://github.com/dharmafly/jsonpatch.js) master branch\n- [jiff](https://www.npmjs.com/package/jiff) 0.7.2 browserified\n- [json8-patch](https://www.npmjs.com/package/json8-patch) 0.3.2 browserified\n\nWe aim the tests to be fair. Our library puts performance as the #1 priority, while other libraries can have different priorities. If you'd like to update the benchmarks or add a library, please edit the jsperf benchmarks linked above and open an issue to include new results.\n\n## Features\n* Allows you to apply patches on object trees for incoming traffic.\n* Allows you to freely manipulate object trees and then generate patches for outgoing traffic.\n* Tested in IE 8-11, Firefox, Chrome, Safari and Node.js\n\n\n## Install\n\nInstall the current version (and save it as a dependency):\n\n### npm\n\n```sh\n$ npm install fast-json-patch --save\n```\n### bower\n\n```sh\n$ bower install fast-json-patch --save\n```\n\n### [download as ZIP](https://github.com/Starcounter-Jack/JSON-Patch/archive/master.zip)\n\n\n## Adding to your project\n\n### In a web browser\n\nInclude `dist/fast-json-patch.js`.\n\n### In Node.js\n\nCall require to get the instance:\n\n```js\nvar jsonpatch = require('fast-json-patch')\n```\n\nOr use ES6 style:\n\n```js\nimport { applyOperation } from 'fast-json-patch'\n```\n\nYou can also require all API functions individually, all jsonpatch functions can be used as pure functions:\n\n```js\nconst { applyOperation } = require('fast-json-patch');\n```\n\n## Usage\n\n#### Applying patches:\n\n```js\nvar document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [] } };\nvar patch = [\n  { op: \"replace\", path: \"/firstName\", value: \"Joachim\" },\n  { op: \"add\", path: \"/lastName\", value: \"Wester\" },\n  { op: \"add\", path: \"/contactDetails/phoneNumbers/0\", value: { number: \"555-123\" }  }\n];\ndocument = jsonpatch.applyPatch(document, patch).newDocument;\n// document == { firstName: \"Joachim\", lastName: \"Wester\", contactDetails: { phoneNumbers: [{number:\"555-123\"}] } };\n```\n\n##### For apply individual operations you can use `applyOperation`\n\n`jsonpatch.applyOperation` accepts a single operation object instead of a sequence, and returns the object after applying the operation. It works with all the standard JSON patch operations (`add, replace, move, test, remove and copy`).\n\n```js\nvar document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [] } };\nvar operation = { op: \"replace\", path: \"/firstName\", value: \"Joachim\" };\ndocument = jsonpatch.applyOperation(document, operation).newDocument;\n// document == { firstName: \"Joachim\", contactDetails: { phoneNumbers: [] }}\n```\n\n#### Using `applyReducer` with `reduce`\n\nIf you have an array of operations, you can simple reduce them using `applyReducer` as your reducer:\n\n```js\nvar document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [ ] } };\nvar patch = [\n  { op:\"replace\", path: \"/firstName\", value: \"Joachim\" },\n  { op:\"add\", path: \"/lastName\", value: \"Wester\" },\n  { op:\"add\", path: \"/contactDetails/phoneNumbers/0\", value: { number: \"555-123\" } }\n];\nvar updatedDocument = patch.reduce(applyReducer, document);\n// updatedDocument == { firstName:\"Joachim\", lastName:\"Wester\", contactDetails:{ phoneNumbers[ {number:\"555-123\"} ] } };\n```\n\nGenerating patches:\n\n```js\nvar document = { firstName: \"Joachim\", lastName: \"Wester\", contactDetails: { phoneNumbers: [ { number:\"555-123\" }] } };\nvar observer = jsonpatch.observe(document);\ndocument.firstName = \"Albert\";\ndocument.contactDetails.phoneNumbers[0].number = \"123\";\ndocument.contactDetails.phoneNumbers.push({ number:\"456\" });\nvar patch = jsonpatch.generate(observer);\n// patch  == [\n//   { op: \"replace\", path: \"/firstName\", value: \"Albert\"},\n//   { op: \"replace\", path: \"/contactDetails/phoneNumbers/0/number\", value: \"123\" },\n//   { op: \"add\", path: \"/contactDetails/phoneNumbers/1\", value: {number:\"456\"}}\n// ];\n```\n\nComparing two object trees:\n\n```js\nvar documentA = {user: {firstName: \"Albert\", lastName: \"Einstein\"}};\nvar documentB = {user: {firstName: \"Albert\", lastName: \"Collins\"}};\nvar diff = jsonpatch.compare(documentA, documentB));\n//diff == [{op: \"replace\", path: \"/user/lastName\", value: \"Collins\"}]\n```\n\nValidating a sequence of patches:\n\n```js\nvar obj = {user: {firstName: \"Albert\"}};\nvar patches = [{op: \"replace\", path: \"/user/firstName\", value: \"Albert\"}, {op: \"replace\", path: \"/user/lastName\", value: \"Einstein\"}];\nvar errors = jsonpatch.validate(patches, obj);\nif (errors.length == 0) {\n //there are no errors!\n}\nelse {\n  for (var i=0; i < errors.length; i++) {\n    if (!errors[i]) {\n      console.log(\"Valid patch at index\", i, patches[i]);\n    }\n    else {\n      console.error(\"Invalid patch at index\", i, errors[i], patches[i]);\n    }\n  }\n}\n```\n\n## API\n\n#### `jsonpatch.applyPatch<T>(document: any, patch: Operation[], validateOperation: Boolean | Function = false): OperationResult<T>[]`\n\nApplies `patch` array on `obj`.\n\nAn invalid patch results in throwing an error (see `jsonpatch.validate` for more information about the error object).\n\nIt modifies the `document` object and `patch` - it gets the values by reference.\nIf you would like to avoid touching your values, clone them: `jsonpatch.applyPatch(document, jsonpatch.deepClone(patch))`.\n\nReturns an array of [`OperationResult`](#operationresult-type) objects - one item for each item in `patches`, each item is an object `{newDocument: any, test?: boolean, removed?: any}`.\n\n* `test` - boolean result of the test\n* `remove`, `replace` and `move` - original object that has been removed\n* `add` (only when adding to an array) - index at which item has been inserted (useful when using `-` alias)\n\n** Note: It throws `TEST_OPERATION_FAILED` error if `test` operation fails. **\n\n** Note II: the returned array has `newDocument` property that you can use as the final state of the patched document **.\n\n- See [Validation notes](#validation-notes).\n\n#### `applyOperation<T>(document: any, operation: Operation, validateOperation: <Boolean | Function> = false, mutateDocument = true): OperationResult<T>`\n\nApplies single operation object `operation` on `document`.\n\n- `document` The document to patch\n- `operation` The operation to apply\n- `validateOperation` Whether to validate the operation, or to pass a validator callback\n- `mutateDocument` Whether to mutate the original document or clone it before applying\n\nIt modifies the `document` object and `operation` - it gets the values by reference.\nIf you would like to avoid touching your values, clone them: `jsonpatch.applyOperation(document, jsonpatch.deepClone(operation))`.\n\nReturns an [`OperationResult`](#operationresult-type) object `{newDocument: any, test?: boolean, removed?: any}`.\n\n** Note: It throws `TEST_OPERATION_FAILED` error if `test` operation fails. **\n\n- See [Validation notes](#validation-notes).\n\n#### `jsonpatch.applyReducer<T>(document: T, operation: Operation): T`\n\n**Ideal for `patch.reduce(jsonpatch.applyReducer, document)`**.\n\nApplies single operation object `operation` on `document`.\n\nReturns the a modified document.\n\nNote: It throws `TEST_OPERATION_FAILED` error if `test` operation fails.\n\n#### `jsonpatch.deepClone(value: any): any`\n\nReturns deeply cloned value.\n\n#### `jsonpatch.escapePathComponent(path: string): string`\n\nReturns the escaped path.\n\n#### `jsonpatch.unescapePathComponent(path: string): string`\n\nReturns the unescaped path.\n\n#### `jsonpatch.getValueByPointer(document: object, pointer: string)`\n\nRetrieves a value from a JSON document by a JSON pointer.\n\nReturns the value.\n\n#### `jsonpatch.observe(document: any, callback?: Function): Observer`\n\nSets up an deep observer on `document` that listens for changes in object tree. When changes are detected, the optional\ncallback is called with the generated patches array as the parameter.\n\nReturns `observer`.\n\n#### `jsonpatch.generate(document: any, observer: Observer): Operation[]`\n\nIf there are pending changes in `obj`, returns them synchronously. If a `callback` was defined in `observe`\nmethod, it will be triggered synchronously as well.\n\nIf there are no pending changes in `obj`, returns an empty array (length 0).\n\n#### `jsonpatch.unobserve(document: any, observer: Observer): void`\n\nDestroys the observer set up on `document`.\n\nAny remaining changes are delivered synchronously (as in `jsonpatch.generate`). Note: this is different that ES6/7 `Object.unobserve`, which delivers remaining changes asynchronously.\n\n#### `jsonpatch.compare(document1: any, document2: any): Operation[]`\n\nCompares object trees `document1` and `document2` and returns the difference relative to `document1` as a patches array.\n\nIf there are no differences, returns an empty array (length 0).\n\n#### `jsonpatch.validate(patch: Operation[], document?: any, validator?: Function): JsonPatchError`\n\nSee [Validation notes](#validation-notes)\n\nValidates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object tree.\n\nIf there are no errors, returns undefined. If there is an errors, returns a JsonPatchError object with the following properties:\n\n- `name` String - short error code\n- `message` String - long human readable error message\n- `index` Number - index of the operation in the sequence\n- `operation` Object - reference to the operation\n- `tree` Object - reference to the tree\n\nPossible errors:\n\nError name                    | Error message\n------------------------------|------------\nSEQUENCE_NOT_AN_ARRAY         | Patch sequence must be an array\nOPERATION_NOT_AN_OBJECT       | Operation is not an object\nOPERATION_OP_INVALID          | Operation `op` property is not one of operations defined in RFC-6902\nOPERATION_PATH_INVALID        | Operation `path` property is not a valid string\nOPERATION_FROM_REQUIRED       | Operation `from` property is not present (applicable in `move` and `copy` operations)\nOPERATION_VALUE_REQUIRED      | Operation `value` property is not present, or `undefined` (applicable in `add`, `replace` and `test` operations)\nOPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED  | Operation `value` property object has at least one `undefined` value (applicable in `add`, `replace` and `test` operations)\nOPERATION_PATH_CANNOT_ADD     | Cannot perform an `add` operation at the desired path\nOPERATION_PATH_UNRESOLVABLE   | Cannot perform the operation at a path that does not exist\nOPERATION_FROM_UNRESOLVABLE   | Cannot perform the operation from a path that does not exist\nOPERATION_PATH_ILLEGAL_ARRAY_INDEX | Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\nOPERATION_VALUE_OUT_OF_BOUNDS | The specified index MUST NOT be greater than the number of elements in the array\nTEST_OPERATION_FAILED | When operation is `test` and the test fails, applies to `applyReducer`.\n\n## `OperationResult` Type\n\nFunctions `applyPatch` and `applyOperation` both return `OperationResult` object. This object is:\n\n```ts\n{newDocument: any, test?: boolean, removed?: any}\n```\n\nWhere:\n\n- `newDocument`: the new state of the document after the patch/operation is applied.\n- `test`: if the operation was a `test` operation. This will be its result.\n- `removed`: contains the removed, moved, or replaced values from the document after a `remove`, `move` or `replace` operation.\n\n\n## Validation Notes\n\nFunctions `applyPatch`, `applyOperation`, and `validate` accept a `validate`/ `validator` parameter:\n\n- If the `validateOperation` parameter is set to `false`, validation will not occur.\n- If set to `true`, the patch is extensively validated before applying using jsonpatch's default validation.\n- If set to a `function` callback, the patch is validated using that function.\n\nIf you pass a validator, it will be called with four parameters for each operation, `function(operation, index, tree, existingPath)` and it is expected to throw `JsonPatchError` when your conditions are not met.\n\n- `operation` The operation it self.\n- `index` `operation`'s index in the patch array (if application).  \n- `tree` The object that is supposed to be patched.\n- `existingPath` the path `operation` points to.\n\n## Overwriting and `move` Operation\n\nWhen the target of the move operation already exists, it is cached, deep cloned and returned as `removed` in `OperationResult`.\n\n## `undefined`s (JS to JSON projection)\n\nAs `undefined` type does not exist in JSON, it's also not a valid value of JSON Patch operation. Therefore `jsonpatch` will not generate JSON Patches that sets anything to `undefined`.\n\nWhenever a value is set to `undefined` in JS, JSON-Patch methods `generate` and `compare` will treat it similarly to how JavaScript method [`JSON.stringify` (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) treats them:\n\n> If `undefined` (...) is encountered during conversion it is either omitted (when it is found in an object) or censored to `null` (when it is found in an array).\n\nSee the [ECMAScript spec](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-json.stringify) for details.\n\n## Specs/tests\n\n - [Run in browser](http://starcounter-jack.github.io/JSON-Patch/test/)\n\n## [Contributing](CONTRIBUTING.md)\n\n## Changelog\n\nTo see the list of recent changes, see [Releases](https://github.com/Starcounter-Jack/JSON-Patch/releases).\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "fast-json-patch@2.0.3",
  "_shasum": "071cc02d2cbb89203c384b3109d3404131bb0a25",
  "_from": "starcounter-jack/JSON-Patch",
  "_resolved": "git://github.com/starcounter-jack/JSON-Patch.git#02187fbc74f3718ac7498f3c9b955df79cc1c3e2"
}
